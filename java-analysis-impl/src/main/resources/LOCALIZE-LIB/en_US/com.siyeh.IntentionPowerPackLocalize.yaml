0.already.extends.1.and.will.not.compile.after.converting.2.to.a.class:
    text: '{0} already extends {1} and will not compile after converting {2} to a class'
0.is.declared.in.1.but.when.public.should.be.declared.in.a.file.named.2:
    text: '{0} is declared in {1} but when public should be declared in a file named {2}'
0.will.have.incompatible.access.privileges.with.overriding.1:
    text: '{0} will have incompatible access privileges with overriding {1}'
0.will.have.incompatible.access.privileges.with.super.1:
    text: '{0} will have incompatible access privileges with super {1}'
0.will.no.longer.be.visible.from.overriding.1:
    text: '{0} will no longer be visible from overriding {1}'
1.fully.qualified.name.status.bar.escape.highlighting.message:
    text: 1 fully qualified name replaced with import (press Escape to remove highlighting)
adapter.to.listener.intention.family.name:
    text: Replace Adapter Extension with Listener Implementation
adapter.to.listener.intention.name:
    text: Replace extension of ''{0}'' with ''Listener'' implementation
add.array.creation.expression.intention.family.name:
    text: Add Array Creation Expression
add.array.creation.expression.intention.name:
    text: Add ''new {0}''
add.braces.intention.family.name:
    text: Add Braces
add.braces.intention.name:
    text: Add Braces to ''{0}'' statement
add.clarifying.parentheses.intention.family.name:
    text: Add Clarifying Parentheses
add.clarifying.parentheses.intention.name:
    text: Add clarifying parentheses
annotate.overridden.methods.intention.family.name:
    text: Annotate overriding methods and their parameters
annotate.overridden.methods.intention.method.name:
    text: Annotate overriding methods as ''@{0}''
annotate.overridden.methods.intention.parameters.name:
    text: Annotate same parameter of overriding methods as ''@{0}''
assert.to.if.intention.family.name:
    text: Replace Assert with If Statement
assert.to.if.intention.name:
    text: Replace 'assert' with 'if' statement
change.to.c.style.comment.intention.family.name:
    text: Replace with Block Comment
change.to.c.style.comment.intention.name:
    text: Replace with block comment
change.to.end.of.line.comment.intention.family.name:
    text: Replace with End Of Line Comment
change.to.end.of.line.comment.intention.name:
    text: Replace with end-of-line comment
change.variable.type.to.rhs.type.intention.family.name:
    text: Change Variable Type to Type of Initializer
change.variable.type.to.rhs.type.intention.name:
    text: Declare ''{0}'' with type ''{1}''
char.to.string.intention.family.name:
    text: Replace Char with String
char.to.string.intention.name:
    text: Replace character literal with string
constant.expression.intention.family.name:
    text: Compute Constant Value
constant.expression.intention.name:
    text: Compute constant value of ''{0}''
constant.subexpression.intention.family.name:
    text: Compute Constant Value for Subexpression
convert.catch.to.throws.intention.family.name:
    text: Replace Catch Section with Throws Declaration
convert.catch.to.throws.intention.name:
    text: Replace 'catch' section with 'throws' declaration
convert.integer.to.binary.intention.family.name:
    text: Convert to Binary
convert.integer.to.binary.intention.name:
    text: Convert to binary
convert.integer.to.decimal.intention.family.name:
    text: Convert to Decimal
convert.integer.to.decimal.intention.name:
    text: Convert to decimal
convert.integer.to.hex.intention.family.name:
    text: Convert to Hexadecimal
convert.integer.to.hex.intention.name:
    text: Convert to hex
convert.integer.to.octal.intention.family.name:
    text: Convert to Octal
convert.integer.to.octal.intention.name:
    text: Convert to octal
convert.interface.to.class.intention.family.name:
    text: Convert Interface to Class
convert.interface.to.class.intention.name:
    text: Convert to 'class'
convert.j.unit3.test.case.to.j.unit4.intention.family.name:
    text: Convert JUnit3 Test Case to JUnit4
convert.j.unit3.test.case.to.j.unit4.intention.name:
    text: Convert to JUnit4 Test Case
convert.to.nested.if.intention.family.name:
    text: Expand Boolean to multiple ifs
convert.to.nested.if.intention.name:
    text: Convert to multiple 'if's
convert.to.plain.intention.family.name:
    text: Convert to Plain
convert.to.plain.intention.name:
    text: Convert to plain
convert.to.scientific.notation.intention.family.name:
    text: Convert to Scientific Notation
convert.to.scientific.notation.intention.name:
    text: Convert to scientific notation
convert.vararg.parameter.to.array.intention.family.name:
    text: Convert Variable Argument Parameter to Array Parameter
convert.vararg.parameter.to.array.intention.name:
    text: Convert variable argument parameter to array
copy.concatenated.string.to.clipboard.intention.family.name:
    text: Copy String Concatenation Text to the Clipboard
copy.concatenated.string.to.clipboard.intention.name:
    text: Copy String concatenation text to the clipboard
create.assert.intention.family.name:
    text: Create JUnit Assertion
create.assert.intention.name:
    text: Create JUnit Assertion
create.enum.switch.branches.intention.family.name:
    text: Create Enum Switch Branches
create.enum.switch.branches.intention.name:
    text: Create missing 'switch' branches
demorgans.intention.family.name:
    text: DeMorgan Law
demorgans.intention.name1:
    text: Replace '\&\&' with '||'
demorgans.intention.name2:
    text: Replace '||' with '\&\&'
detail.exceptions.intention.family.name:
    text: Detail Exceptions
detail.exceptions.intention.name:
    text: Detail exceptions
expand.boolean.intention.family.name:
    text: Expand Boolean
expand.boolean.intention.name:
    text: Convert to 'if else'
expand.one.line.lambda2.code.block.intention.family.name:
    text: Expand lambda expression body to code block
expand.to.normal.annotation.intention.family.name:
    text: Expand Annotation to Normal Form
expand.to.normal.annotation.name:
    text: Expand to ''{0}''
extract.increment.intention.family.name:
    text: Extract Increment
extract.increment.intention.name:
    text: Extract ''{0}''
extract.while.loop.condition.to.if.statement.intention.family.name:
    text: Extract While Loop Condition to Internal If Statement
extract.while.loop.condition.to.if.statement.intention.name:
    text: Extract condition to internal 'if' statement
flip.assert.literal.intention.family.name:
    text: Flip Assert Literal
flip.assert.literal.intention.name:
    text: Replace ''{0}()'' with ''{1}()''
flip.commutative.method.call.intention.family.name:
    text: Flip Commutative Method Call
flip.commutative.method.call.intention.name:
    text: Flip ''.{0}()''
flip.commutative.method.call.intention.name1:
    text: Flip ''.{0}()'' (may change semantics)
flip.comparison.intention.family.name:
    text: Flip Comparison
flip.comparison.intention.name:
    text: Flip ''{0}'' to ''{1}''
flip.conditional.intention.family.name:
    text: Flip Conditional
flip.conditional.intention.name:
    text: Flip '?:'
flip.conjunction.intention.family.name:
    text: Flip Conjunction Operands
flip.expression.intention.family.name:
    text: Flip Binary Expression
flip.setter.call.intention.family.name:
    text: Flip Setter Call(s)
flip.setter.call.intention.name:
    text: Flip Setter Call
flip.smth.intention.name:
    text: Flip ''{0}''
flip.smth.intention.name1:
    text: Flip ''{0}'' (changes semantics)
if.to.assertion.intention.family.name:
    text: Replace If with Assert Statement
if.to.assertion.intention.name:
    text: Replace 'if' with 'assert' statement
infer.lambda.parameter.type.intention.family.name:
    text: Infer lambda parameter type
intention.category.annotations:
    text: Annotations
intention.category.boolean:
    text: Boolean
intention.category.comments:
    text: Comments
intention.category.conditional.operator:
    text: Conditional Operator
intention.category.control.flow:
    text: Control Flow
intention.category.declaration:
    text: Declaration
intention.category.imports:
    text: Imports
intention.category.junit:
    text: JUnit
intention.category.modifiers:
    text: Modifiers
intention.category.numbers:
    text: Numbers
intention.category.other:
    text: Other
intention.category.shift.operation:
    text: Shift Operation
intention.category.strings:
    text: Strings
join.concatenated.string.literals.intention.family.name:
    text: Join Concatenated String Literals
join.concatenated.string.literals.intention.name:
    text: Join concatenated String literals
make.call.chain.into.call.sequence.intention.family.name:
    text: Make Call Chain Into Call Sequence
make.call.chain.into.call.sequence.intention.name:
    text: Make method call chain into call sequence
make.method.varargs.intention.family.name:
    text: Convert Method to Variable Argument Method
make.method.varargs.intention.name:
    text: Convert to variable argument method
make.package.private.intention.family.name:
    text: Make Package-Local
make.package.private.intention.name:
    text: Make package-local
make.private.intention.family.name:
    text: Make Private
make.private.intention.name:
    text: Make 'private'
make.protected.intention.family.name:
    text: Make Protected
make.protected.intention.name:
    text: Make 'protected'
make.public.intention.family.name:
    text: Make Public
make.public.intention.name:
    text: Make 'public'
merge.call.sequence.to.chain.intention.family.name:
    text: Merge Sequential Method Calls into Call Chain
merge.call.sequence.to.chain.intention.name:
    text: Merge sequential method calls into call chain
merge.else.if.intention.family.name:
    text: Merge Else If
merge.else.if.intention.name:
    text: Merge 'else if'
merge.if.and.intention.family.name:
    text: Merge Nested Ifs to ANDed Condition
merge.if.and.intention.name:
    text: Merge nested 'if's
merge.if.or.intention.family.name:
    text: Merge Equivalent Ifs to ORed Condition
merge.if.or.intention.name:
    text: Merge sequential 'if's
merge.nested.try.statements.intention.family.name:
    text: Merge Nested Try Statements
merge.nested.try.statements.intention.name:
    text: Merge nested 'try' statements
merge.parallel.ifs.intention.family.name:
    text: Merge Parallel Ifs
merge.parallel.ifs.intention.name:
    text: Merge 'if's
move.comment.to.separate.line.intention.family.name:
    text: Move Comment to Separate Line
move.comment.to.separate.line.intention.name:
    text: Move comment to separate line
multiple.fully.qualified.names.status.bar.escape.highlighting.message:
    text: '{0} fully qualified names replaced with import (press Escape to remove highlighting)'
negate.comparison.intention.family.name:
    text: Negate Comparison
negate.comparison.intention.name:
    text: Negate ''{0}''
negate.comparison.intention.name1:
    text: Negate ''{0}'' to ''{1}''
obscure.thrown.exceptions.intention.family.name:
    text: Replace Exceptions in Throws Clause with Single More General Exception
obscure.thrown.exceptions.intention.name:
    text: Replace with ''throws {0}''
plugin.IntentionPowerPack.description:
    text: Adds over 80 new intention actions for IDEA.
press.escape.to.remove.highlighting.message:
    text: Press Escape to remove the highlighting
remove.boolean.equality.intention.family.name:
    text: Remove Boolean Equality
remove.boolean.equality.intention.name:
    text: Simplify ''{0}''
remove.braces.intention.family.name:
    text: Remove Braces
remove.braces.intention.name:
    text: Remove braces from ''{0}'' statement
remove.conditional.intention.family.name:
    text: Remove Pointless Conditional
remove.conditional.intention.name:
    text: Simplify '?:'
remove.unnecessary.parentheses.intention.family.name:
    text: Remove Unnecessary Parentheses
remove.unnecessary.parentheses.intention.name:
    text: Remove unnecessary parentheses
replace.arm.with.try.finally.intention.family.name:
    text: Replace Try-With-Resources with Try-Finally
replace.arm.with.try.finally.intention.name:
    text: Replace 'try-with-resources' with 'try finally'
replace.assert.equals.with.assert.literal.intention.family.name:
    text: Replace assertEquals with assertTrue, assertFalse, or assertNull
replace.assert.equals.with.assert.literal.intention.name:
    text: Replace ''assertEquals()'' with ''{0}()''
replace.assert.literal.with.assert.equals.intention.family.name:
    text: Replace assertTrue, assertFalse, or assertNull with assertEquals
replace.assert.literal.with.assert.equals.intention.name:
    text: Replace ''{0}()'' with ''assertEquals({1}, ...)''
replace.assert.literal.with.assert.equals.intention.name1:
    text: Replace ''{0}()'' with ''assertEquals(..., {1}, ...)''
replace.assert.literal.with.assert.equals.intention.name2:
    text: Replace ''{0}()'' with ''assertEquals()''
replace.assignment.with.operator.assignment.intention.name:
    text: Replace ''='' with ''{0}=''
replace.assignment.with.postfix.expression.intention.family.name:
    text: Replace Assignment with Postfix Expression
replace.concatenation.with.format.string.intention.family.name:
    text: Replace String Concatenation with String.format()
replace.concatenation.with.format.string.intention.name:
    text: Replace '+' with 'String.format()'
replace.concatenation.with.string.buffer.intention.family.name:
    text: Replace + with StringBuilder.append()
replace.concatenation.with.string.buffer.intention.name:
    text: Replace '+' with 'StringBuffer.append()'
replace.concatenation.with.string.builder.intention.name:
    text: Replace '+' with 'StringBuilder.append()'
replace.conditional.with.if.intention.family.name:
    text: Replace Conditional with If Else
replace.conditional.with.if.intention.name:
    text: Replace '?:' with 'if else'
replace.diamond.with.explicit.type.arguments.intention.family.name:
    text: Replace Diamond with Explicit Type Arguments
replace.diamond.with.explicit.type.arguments.intention.name:
    text: Replace '<>' with explicit type arguments
replace.do.while.loop.with.while.loop.intention.family.name:
    text: Replace Do While Loop with While Loop
replace.do.while.loop.with.while.loop.intention.name:
    text: Replace 'do while' loop with 'while' loop
replace.equality.with.equals.intention.family.name:
    text: Replace Equality with Equals
replace.equality.with.equals.intention.name:
    text: Replace '==' with '.equals()'
replace.equality.with.safe.equals.intention.family.name:
    text: Replace Equality with Safe Equals
replace.equality.with.safe.equals.intention.name:
    text: Replace '==' with safe '.equals()'
replace.equals.with.equality.intention.family.name:
    text: Replace Equals with Equality
replace.equals.with.equality.intention.name:
    text: Replace '.equals()' with '=='
replace.for.each.loop.with.indexed.for.loop.intention.family.name:
    text: Replace For-each Loop with Indexed For Loop
replace.for.each.loop.with.indexed.for.loop.intention.name:
    text: Replace 'for each' loop with indexed 'for' loop
replace.for.each.loop.with.iterator.for.loop.intention.family.name:
    text: Replace For-each Loop with Iterator For Loop
replace.for.each.loop.with.iterator.for.loop.intention.name:
    text: Replace 'for each' loop with iterator 'for' loop
replace.for.each.loop.with.optimized.indexed.for.loop.intention.family.name:
    text: Replace For-each Loop with Optimized Indexed For Loop
replace.for.each.loop.with.optimized.indexed.for.loop.intention.name:
    text: Replace 'for each' loop with optimized indexed 'for' loop
replace.for.loop.with.while.loop.intention.family.name:
    text: Replace For Loop with While Loop
replace.for.loop.with.while.loop.intention.name:
    text: Replace 'for' loop with 'while' loop
replace.fully.qualified.name.with.import.intention.family.name:
    text: Replace Qualified Name with Import
replace.fully.qualified.name.with.import.intention.name:
    text: Replace qualified name with 'import'
replace.if.with.conditional.intention.family.name:
    text: Replace If Else with Conditional
replace.if.with.conditional.intention.name:
    text: Replace 'if else' with '?:'
replace.if.with.switch.intention.family.name:
    text: Replace If with Switch
replace.if.with.switch.intention.name:
    text: Replace 'if' with 'switch'
replace.lambda.with.anonymous.intention.family.name:
    text: Replace lambda with anonymous class
replace.lambda.with.anonymous.intention.name:
    text: Replace lambda with anonymous class
replace.method.ref.with.lambda.intention.family.name:
    text: Replace method reference with lambda
replace.method.ref.with.lambda.intention.name:
    text: Replace method reference with lambda
replace.multiply.with.shift.intention.family.name:
    text: Replace Multiply with Shift
replace.on.demand.import.intention.family.name:
    text: Replace On Demand Import with Single Class Imports
replace.on.demand.import.intention.name:
    text: Replace with single class imports
replace.operator.assignment.with.assignment.intention.family.name:
    text: Replace Operator Assignment with Assignment
replace.operator.assignment.with.assignment.intention.name:
    text: Replace ''{0}'' with ''=''
replace.operator.assignment.with.postfix.expression.intention.family.name:
    text: Replace Operator Assignment with Postfix Expression
replace.postfix.expression.with.assignment.intention.family.name:
    text: Replace Postfix Expression with Assignment
replace.postfix.expression.with.operator.assignment.intention.family.name:
    text: Replace Postfix Expression with Operator Assignment
replace.shift.with.multiply.intention.family.name:
    text: Replace Shift with Multiply
replace.some.operator.with.other.intention.name:
    text: Replace ''{0}'' with ''{1}''
replace.switch.with.if.intention.family.name:
    text: Replace Switch with If
replace.switch.with.if.intention.name:
    text: Replace 'switch' with 'if'
replace.while.loop.with.do.while.loop.intention.family.name:
    text: Replace While Loop with Do While Loop
replace.while.loop.with.do.while.loop.intention.name:
    text: Replace 'while' loop with 'do while' loop
replace.with.operator.assignment.intention.family.name:
    text: Replace Assignment with Operator Assignment
reverse.for.loop.direction.intention.family.name:
    text: Reverse Direction of For Loop
reverse.for.loop.direction.intention.name:
    text: Reverse direction of for loop
simplify.if.else.intention.family.name:
    text: Simplify If Else
simplify.if.else.intention.name:
    text: Simplify 'if else'
simplify.variable.intention.family.name:
    text: Replace with Java Style Array Declaration
simplify.variable.intention.name:
    text: Replace with Java-style array declaration
split.declaration.and.initialization.intention.family.name:
    text: Split Declaration and Initialization
split.declaration.and.initialization.intention.name:
    text: Split into declaration and initialization
split.else.if.intention.family.name:
    text: Split Else If
split.else.if.intention.name:
    text: Split 'else if'
split.multi.catch.intention.family.name:
    text: Split Multi-Catch into Separate Catch Blocks
split.multi.catch.intention.name:
    text: Split multi-catch into separate 'catch' blocks
split.try.with.multiple.resources.intention.family.name:
    text: Split Try Statement with Multiple Resources
split.try.with.multiple.resources.intention.name:
    text: Split 'try' statement with multiple resources
status.bar.escape.highlighting.message:
    text: Press Escape to remove the highlighting
string.to.char.intention.family.name:
    text: Replace String with Char
string.to.char.intention.name:
    text: Replace string literal with character
swap.method.call.arguments.intention.family.name:
    text: Swap Method Call Arguments
swap.method.call.arguments.intention.name:
    text: Swap ''{0}'' and ''{1}''
wrap.vararg.arguments.with.explicit.array.intention.family.name:
    text: Wrap Vararg Arguments with Explicit Array Creation
wrap.vararg.arguments.with.explicit.array.intention.name:
    text: Wrap vararg arguments with explicit array creation
